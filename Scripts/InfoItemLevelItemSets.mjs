import { fetchDBC, updateAutoGenerated } from './utils.mjs';

// base set id and tier id is started from Dragonflight Season 1
const baseSetID = 1525;
const baseTierID = 29;

const classes = (await fetchDBC('ChrClasses'))
    .filter((chrClass) => (parseInt(chrClass.Flags, 10) & 0x2) > 0)
    .map((chrClass) => chrClass.Name_lang);

const itemSet = await fetchDBC('ItemSet');
const itemSearchName = await fetchDBC('ItemSearchName');

/**
 * @param {string} itemID
 * @param {number} classID
 * @returns {boolean}
 */
const isItemOnlyForClass = (itemID, classID) => {
    const itemInfo = itemSearchName.find((item) => item.ID === itemID);
    return parseInt(itemInfo?.AllowableClass ?? '0', 10) === (1 << classID);
};

const classSets = classes.map((className, classID) => {
    const recentSets = itemSet.filter((set) => {
        if (parseInt(set.ID, 10) < baseSetID) {
            // legacy set
            return false;
        }

        if (set['ItemID[4]'] !== '0' && set['ItemID[5]'] === '0') {
            // only 5 items
            for (let i = 0; i < 5; ++i) {
                // every item must be only for this class
                if (!isItemOnlyForClass(set[`ItemID[${i}]`], classID)) {
                    return false;
                }
            }
            return true;
        }
    });

    let result = `    -- ${className}\n`;
    for (let i = Math.max(0, recentSets.length - 2); i < recentSets.length; ++i) {
        const tierIndex = baseTierID + i;

        result += `    -- ${recentSets[i].Name_lang}\n   `;
        for (let j = 0; j < 5; ++j) {
            result += ` [${recentSets[i][`ItemID[${j}]`]}] = ${tierIndex},`;
        }
        result += '\n';
    };

    return result;
});

updateAutoGenerated('InfoItemLevelItemSets', `local tierSetItemIDs = {\n${classSets.join('')}}`);

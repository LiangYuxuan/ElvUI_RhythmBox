import fs from 'node:fs';
import path from 'node:path';
import { fileURLToPath } from 'node:url';

const rootDir = path.resolve(fileURLToPath(import.meta.url), '..', '..', '..', 'Modules');

const getFilesByRegex = (regex: RegExp, parent: string): string[] => {
    const result: string[] = [];
    const files = fs.readdirSync(parent);

    files.forEach((file) => {
        const filePath = path.join(parent, file);
        const stat = fs.statSync(filePath);
        if (stat.isDirectory()) {
            result.push(...getFilesByRegex(regex, filePath));
        } else if (stat.isFile() && path.extname(filePath) === '.lua') {
            const content = fs.readFileSync(filePath, 'utf-8');
            if (content.match(regex)) {
                result.push(filePath);
            }
        }
    });

    return result;
};

const updateAutoGenerated = (key: string, content: string) => {
    const regex = new RegExp(`([ \t]*)---AUTO_GENERATED LEADING ${key}\r?\n(.|\r|\n)*\r?\n([ \t]*)---AUTO_GENERATED TAILING ${key}\r?\n`, 'g');
    const files = getFilesByRegex(regex, rootDir);

    files.forEach((file) => {
        const relateivePath = path.relative(rootDir, file);
        // eslint-disable-next-line no-console
        console.log(new Date().toISOString(), `[INFO]: Handling ${relateivePath}`);

        const fileContent = fs.readFileSync(file, 'utf-8');
        const newFileContent = fileContent.replace(regex, (_, indent: string) => {
            const newContent = `${indent}${content.replace(/\n/g, `\n${indent}`).replaceAll(`\n${indent}\n`, '\n\n')}`;
            return `${indent}---AUTO_GENERATED LEADING ${key}\n${newContent}\n${indent}---AUTO_GENERATED TAILING ${key}\n`;
        });
        if (newFileContent !== fileContent) {
            // eslint-disable-next-line no-console
            console.log(new Date().toISOString(), `[INFO]: Updating ${relateivePath}`);
            fs.writeFileSync(file, newFileContent, 'utf-8');
        }
    });
};

export default updateAutoGenerated;
